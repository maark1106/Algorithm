import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.StringTokenizer;

public class Main {

    int N;
    int[][] graph;
    int res = 0;
    int lastNode;
    boolean flag = true;

    void solution() throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());

        N = Integer.parseInt(st.nextToken());
        graph = new int[N + 1][2];

        for (int i = 0; i < N; i++) {
            st = new StringTokenizer(br.readLine());
            int p = Integer.parseInt(st.nextToken());
            int c1 = Integer.parseInt(st.nextToken());
            int c2 = Integer.parseInt(st.nextToken());

            graph[p][0] = c1;
            graph[p][1] = c2;
        }

        DFS(1);
        similarDFS(1);
        System.out.println(res);
    }

    void DFS(int d) {

        if(graph[d][0] != -1){
            DFS(graph[d][0]);
        }

        lastNode = d;

        if(graph[d][1] != -1){
            DFS(graph[d][1]);
        }
    }

    void similarDFS(int d) {
        if (graph[d][0] != -1) {
            res++;
            similarDFS(graph[d][0]);
            if(flag) {
                res++;
            }
        }

        if(d == lastNode){
            flag = false;
            return;
        }

        if (graph[d][1] != -1) {
            res++;
            similarDFS(graph[d][1]);
            if(flag) {
                res++;
            }
        }
    }

    public static void main(String[] args) throws IOException {
        new Main().solution();
    }
}
