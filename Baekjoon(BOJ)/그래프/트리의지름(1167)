import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.StringTokenizer;

public class Main {

    int N;
    ArrayList<Node>[] graph;
    int res = 0;
    int start;
    boolean[] visited;

    public static void main(String[] args) throws IOException {
        new Main().solution();
    }

    void solution() throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());

        N = Integer.parseInt(st.nextToken());
        graph = new ArrayList[N + 1];
        for (int i = 0; i <= N; i++) {
            graph[i] = new ArrayList<>();
        }

        for (int i = 0; i < N; i++) {
            st = new StringTokenizer(br.readLine());
            int num = Integer.parseInt(st.nextToken());

            while (true) {
                int v1 = Integer.parseInt(st.nextToken());

                if (v1 == -1) {
                    break;
                }
                int w = Integer.parseInt(st.nextToken());

                graph[num].add(new Node(v1, w));
            }
        }

        visited = new boolean[N + 1];
        visited[1] = true;
        DFS(1, 0);
        res = 0;

        Arrays.fill(visited, false);
        visited[start] = true;
        DFS(start, 0);
        System.out.println(res);
    }

    void DFS(int d, int total) {

        if(res < total){
            res = total;
            start = d;
        }

        for(Node node : graph[d]){
            if(visited[node.e] == false) {
                visited[node.e] = true;
                DFS(node.e, total + node.cost);
            }
        }
    }

    class Node{
        int e;
        int cost;

        public Node(int e, int cost) {
            this.e = e;
            this.cost = cost;
        }
    }
}
